replicaCount: 1

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

# The admission webhook needs to communicate with the k8s api server over https
# A caBundle needs to be created and specified ValidatingWebhookConfiguration
# These certs also need to be mounted into kube-sentry so that we can utilize them
webhook:
  name: kube-sentry.test.svc
  caBundle:
    certmanager: # certmanager's ca-injector can be used to inject the caBundle into the ValidationWebhookConfiguration https://cert-manager.io/docs/concepts/ca-injector/
      enabled: true
    value: "" # if you are not using certmanager, put the caBundle value here

image:
  repository:  docker.io/tks98/kube-sentry
  pullPolicy: Always
  tag: "latest"
  args:
    tlsCertFile: "/etc/webhook/certs/tls.crt"
    tlsKeyFile: "/etc/webhook/certs/tls.key"
    insecure: "false"
    listenAddr: ":8080"
    metricsAddr: ":8081"
    trivyAddr: "trivy.kube-sentry:4954"
    trivyScheme: "http"
    metricsLabels: "report_name, image_namespace, image_registry, image_repository, image_tag,image_digest, severity, vulnerability_id, vulnerable_resource_name, installed_resource_version, fixed_resource_version, vulnerability_title, vulnerability_link"
    sentryMode: "true"
    forbiddenCves: "CVE-2020-36309, CVE-2013-0337"
    numCriticalCves: "10"
    numAllowedCves: "10"
  ports:
    - name: http
      containerPort: 8080
      protocol: TCP
    - name: metrics
      containerPort: 8081
      protocol: TCP

serviceAccount:
  create: true

podAnnotations:
  prometheus.io/path: /
  prometheus.io/port: '8081'
  prometheus.io/scrape: 'true'

securityContext:
  capabilities:
     drop:
     - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000

service:
  type: ClusterIP
  port: 443

autoscaling:
  enabled: false

# enable and configure trivy server instance to be deployed with kube-sentry
# https://github.com/aquasecurity/trivy/blob/main/helm/trivy/values.yaml
trivy:
  enabled: true
  fullnameOverride: "trivy"
